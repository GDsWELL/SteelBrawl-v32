import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram import executor
import datetime
import time

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
is_command_running = False
last_used_time = {}

BATTLES_FILE_PATH = 'bin/Debug/net6.0/battles.txt'
last_updated = None
ADMIN_ID = 6744773692  

def count_battle_rank():
    try:
        with open(BATTLES_FILE_PATH, 'r') as file:
            lines = file.readlines()

        count_battle_royale = 0
        count_battle_royale_team = 0
        count_coin_rush = 0
        count_laser_ball = 0
        count_robo_wars = 0
        count_bounty_hunter = 0
        count_attack_defend = 0
        total_count = 0

        for line in lines:
            # Battle Royale
            if 'gamemode: BattleRoyale!' in line:
                if 'Battle Rank: 1' in line or 'Battle Rank: 2' in line or 'Battle Rank: 3' in line:
                    count_battle_royale += 1
                    total_count += 1

            # Battle Royale Team
            elif 'gamemode: BattleRoyaleTeam!' in line:
                if 'Battle Rank: 1' in line:
                    count_battle_royale_team += 1
                    total_count += 1

            # CoinRush (–ó–∞—Ö–≤–∞—Ç –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤)
            elif 'gamemode: CoinRush!' in line:
                if 'Battle Result: win' in line:
                    count_coin_rush += 1
                    total_count += 1

            # LaserBall (–ë—Ä–æ—É–ª–ë–æ–ª)
            elif 'gamemode: LaserBall!' in line:
                if 'Battle Result: win' in line:
                    count_laser_ball += 1
                    total_count += 1

            # RoboWars (–û—Å–∞–¥–∞)
            elif 'gamemode: RoboWars!' in line:
                if 'Battle Result: win' in line:
                    count_robo_wars += 1
                    total_count += 1

            # BountyHunter (–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–∏–º–∫—É)
            elif 'gamemode: BountyHunter!' in line:
                if 'Battle Result: win' in line:
                    count_bounty_hunter += 1
                    total_count += 1

            # AttackDefend (–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ)
            elif 'gamemode: AttackDefend!' in line:
                if 'Battle Result: win' in line:
                    count_attack_defend += 1
                    total_count += 1

        return (count_battle_royale, count_battle_royale_team, count_coin_rush, 
                count_laser_ball, count_robo_wars, count_bounty_hunter, count_attack_defend, total_count)

    except FileNotFoundError:
        return None, None, None, None, None, None, None, None

def clear_battle_logs():
    try:
        with open(BATTLES_FILE_PATH, 'w') as file:
            file.truncate(0)  # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        return True
    except Exception as e:
        return False

bot = Bot(token='6981617580:AAFY7GXnVYrwaNxdWMAB1yK0JLB7i34dUhQ')
dp = Dispatcher(bot)

async def send_stats_message(chat_id, message_id):
    global last_updated
    (count_battle_royale, count_battle_royale_team, count_coin_rush, count_laser_ball, 
    count_robo_wars, count_bounty_hunter, count_attack_defend, total_count) = count_battle_rank()
    
    if count_battle_royale is not None and count_battle_royale_team is not None:
        response = f'üèÜ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥üèÜ\n\n'
        response += f'üë§ –û–¥–∏–Ω–æ—á–Ω–æ–µ –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ: {count_battle_royale} –ø–æ–±–µ–¥\n'
        response += f'üë• –ü–∞—Ä–Ω–æ–µ –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ: {count_battle_royale_team} –ø–æ–±–µ–¥\n'
        response += f'üíé –ó–∞—Ö–≤–∞—Ç –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: {count_coin_rush} –ø–æ–±–µ–¥\n'
        response += f'‚öΩ –ë—Ä–æ—É–ª–ë–æ–ª: {count_laser_ball} –ø–æ–±–µ–¥\n'
        response += f'ü§ñ –û—Å–∞–¥–∞: {count_robo_wars} –ø–æ–±–µ–¥\n'
        response += f'üéØ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–∏–º–∫—É: {count_bounty_hunter} –ø–æ–±–µ–¥\n'
        response += f'üîì –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ: {count_attack_defend} –ø–æ–±–µ–¥\n\n'
        response += f'üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {total_count}\n\n'

        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        response += f'üïí –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {current_time}'

        keyboard = types.InlineKeyboardMarkup()
        button_update = types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='update_stats')
        keyboard.add(button_update)

        if chat_id == ADMIN_ID:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            button_reset = types.InlineKeyboardButton(text="üßπ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='reset_stats')
            keyboard.add(button_reset)

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=response, reply_markup=keyboard)

        last_updated = current_time

    else:
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.')

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global is_command_running

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞
    if is_command_running:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É –Ω–µ–¥–∞–≤–Ω–æ
    current_time = asyncio.get_event_loop().time()
    if user_id in last_used_time and (current_time - last_used_time[user_id]) < 30:
        await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    is_command_running = True
    last_used_time[user_id] = current_time

    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='get_stats')
    keyboard.add(button)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–±–µ–¥ –≤ SteelBrawl. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", reply_markup=keyboard)

    # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    await asyncio.sleep(10)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É

    is_command_running = False


@dp.callback_query_handler(lambda c: c.data == 'get_stats')
async def process_callback_get_stats(callback_query: types.CallbackQuery):
    await send_stats_message(callback_query.message.chat.id, callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'update_stats')
async def process_callback_update_stats(callback_query: types.CallbackQuery):
    await send_stats_message(callback_query.message.chat.id, callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data == 'reset_stats')
async def process_callback_reset_stats(callback_query: types.CallbackQuery):
    if callback_query.from_user.id == ADMIN_ID:
        if clear_battle_logs():
            await bot.send_message(callback_query.message.chat.id, "üßπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!")
        else:
            await bot.send_message(callback_query.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
    else:
        await bot.send_message(callback_query.message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
